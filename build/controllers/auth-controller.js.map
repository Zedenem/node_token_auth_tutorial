{"version":3,"sources":["../../src/controllers/auth-controller.js"],"names":["jsonWebToken","require","config","authService","signin","req","res","verifyUser","body","name","catch","err","then","user","json","success","message","password","token","sign","secret","expiresIn","exports","signout","redirect"],"mappings":";;AAAA,IAAMA,eAAeC,QAAQ,cAAR,CAArB;;AAEA,IAAMC,SAASD,QAAQ,WAAR,CAAf;AACA;AACA,IAAME,cAAcF,QAAQ,0BAAR,CAApB;;AAEA,SAASG,MAAT,CAAgBC,GAAhB,EAAqBC,GAArB,EAA0B;AACxBH,cAAYI,UAAZ,CAAuBF,IAAIG,IAAJ,CAASC,IAAhC,EACCC,KADD,CACO,UAACC,GAAD,EAAS;AAAE,UAAMA,GAAN;AAAY,GAD9B,EAECC,IAFD,CAEM,UAACC,IAAD,EAAU;AACd,QAAI,CAACA,IAAL,EAAW;AACTP,UAAIQ,IAAJ,CAAS,EAAEC,SAAS,KAAX,EAAkBC,SAAS,wCAA3B,EAAT;AACD,KAFD,MAEO,IAAIH,KAAKI,QAAL,KAAkBZ,IAAIG,IAAJ,CAASS,QAA/B,EAAyC;AAC9CX,UAAIQ,IAAJ,CAAS,EAAEC,SAAS,KAAX,EAAkBC,SAAS,wCAA3B,EAAT;AACD,KAFM,MAEA;AACL;AACA;AACA,UAAME,QAAQlB,aAAamB,IAAb,CAAkBN,IAAlB,EAAwBX,OAAOkB,MAA/B,EAAuC,EAAEC,WAAW,IAAb,EAAvC,CAAd;AACAf,UAAIQ,IAAJ,CAAS;AACPC,iBAAS,IADF;AAEPC,iBAAS,2CAFF;AAGPE;AAHO,OAAT;AAKD;AACF,GAjBD;AAkBD;AACDI,QAAQlB,MAAR,GAAiBA,MAAjB;;AAEA,SAASmB,OAAT,CAAiBlB,GAAjB,EAAsBC,GAAtB,EAA2B;AACzB;AACAA,MAAIkB,QAAJ,CAAa,GAAb;AACD;AACDF,QAAQC,OAAR,GAAkBA,OAAlB","file":"auth-controller.js","sourcesContent":["const jsonWebToken = require('jsonwebtoken');\n\nconst config = require('../config');\n// const User = require('../models/user');\nconst authService = require('../services/auth-service');\n\nfunction signin(req, res) {\n  authService.verifyUser(req.body.name)\n  .catch((err) => { throw err; })\n  .then((user) => {\n    if (!user) {\n      res.json({ success: false, message: 'Authentication failed. User not found.' });\n    } else if (user.password !== req.body.password) {\n      res.json({ success: false, message: 'Authentication failed. Wrong password.' });\n    } else {\n      // Security flaw: remove password from object\n      // before signing it (JWT doesn't encrypt by default, it base64 encodes only)\n      const token = jsonWebToken.sign(user, config.secret, { expiresIn: '1d' });\n      res.json({\n        success: true,\n        message: 'Authentication succeeded. Token provided.',\n        token,\n      });\n    }\n  });\n}\nexports.signin = signin;\n\nfunction signout(req, res) {\n  // TODO: Invalidate the token\n  res.redirect('/');\n}\nexports.signout = signout;\n"]}