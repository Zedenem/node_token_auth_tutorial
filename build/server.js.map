{"version":3,"sources":["../src/server.js"],"names":["express","require","bodyParser","morgan","mongoose","jsonWebToken","config","User","authRouter","app","set","secret","port","process","env","PORT","Promise","global","connect","database","use","urlencoded","extended","json","get","req","res","send","newUser","name","password","admin","save","then","success","err","apiRouter","Router","next","token","body","query","headers","verify","decoded","status","message","find","catch","users","listen","console","log"],"mappings":"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","file":"server.js","sourcesContent":["/* External Requirements */\nconst express = require('express');\nconst bodyParser = require('body-parser');\nconst morgan = require('morgan');\nconst mongoose = require('mongoose');\nconst jsonWebToken = require('jsonwebtoken');\n\n/* Internal Requirements */\nconst config = require('./config');\nconst User = require('./models/user');\n\n// Load Routers\nconst authRouter = require('./routers/auth-router');\n\n/* Configuration */\nconst app = express();\napp.set('secret', config.secret);\nconst port = process.env.PORT || 8080;\n// Set mongoose.Promise to the default ES6 Promise implementation\nmongoose.Promise = global.Promise;\nmongoose.connect(config.database);\n\napp.use(bodyParser.urlencoded({ extended: false }));\napp.use(bodyParser.json());\n\napp.use(morgan('dev')); // Log Requests to the Console\n\n/* Basic Routes */\napp.get('/', (req, res) => {\n  res.send('Welcome to this Tutorial. The API is located at <strong>/api</strong>');\n});\n\napp.get('/setup', (req, res) => {\n  // Create a sample user\n  const newUser = new User({\n    name: 'Nick Cerminara',\n    // Security flaw (beyond the obvious hard-coded stupid password):\n    // passwords should be encrypted, using bcrypt for example\n    password: 'password',\n    admin: true,\n  });\n\n  // Save the sample user\n  newUser.save().then(\n    () => { res.json({ success: true }); },\n    (err) => { throw err; },\n  );\n});\n\n/* API Routes */\napp.use('/api/auth/', authRouter);\n\nconst apiRouter = express.Router();\n\napiRouter.use((req, res, next) => {\n  const token = req.body.token || req.query.token || req.headers['x-access-token'];\n\n  if (token) {\n    jsonWebToken.verify(token, app.get('secret'), (err, decoded) => {\n      if (err) {\n        res.status(403).json({ success: false, message: 'Failed to authenticate token.' });\n      } else {\n        req.decoded = decoded;\n        next();\n      }\n    });\n  } else {\n    res.status(403).send({ success: false, message: 'Missing token.' });\n  }\n});\n\napiRouter.get('/', (req, res) => {\n  res.json({ message: 'Welcome to the coolest API on Earth!' });\n});\n\napiRouter.get('/users', (req, res) => {\n  User.find()\n  .catch(err => res.status(400).send(err))\n  .then(users => res.json(users));\n});\n\napp.use('/api', apiRouter);\n\n/* Start */\napp.listen(port);\nconsole.log(`API now running on port ${port}`);\n"]}